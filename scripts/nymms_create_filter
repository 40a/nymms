#!/usr/bin/env python

__doc__ = """CLI tool to create new reactor suppression filters"""

import boto.sdb
from nymms.filter.sdb_filter import SDBSuppressFilterBackend
import argparse
import time
import os
import logging
import socket
import sys


def get_ipaddr():
    """This is probably the most consistent & cross platform way
    to figure out what our IP address is"""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('google.com', 80))
    ip = s.getsockname()[0]
    s.close()
    return ip

if __name__ == '__main__':
    ipaddr = get_ipaddr()
    userid = os.getlogin()

    logger = logging.getLogger(__name__)
    parser = argparse.ArgumentParser(__doc__)
    parser.add_argument('-r', '--region', dest='region', required=True,
            help='AWS region to connect to')
    parser.add_argument('-e', '--expires', dest='expires', default='+1h',
            help='YYYYMMDDHHMMSS or +XXX[smhd] to expire in. default: +1h')
    parser.add_argument('-f', '--filter', dest='filter', required=True,
            help='Regex to filter events with')
    parser.add_argument('-c', '--comment', dest='comment', required=True,
            help='Comment to record with filter')
    parser.add_argument('-i', '--ipaddr', dest='ipaddr', default=ipaddr,
            help='Override IP address to record: %s' % (ipaddr,))
    parser.add_argument('-u', '--userid', dest='userid', default=userid,
            help='Override userid to record: %s' % (userid,))
    values = parser.parse_args()

    now = int(time.time())
    if values.expires[0] == '+':
        last_char = values.expires[len(values.expires) - 1]
        user_value = values.expires[0:(len(values.expires) - 1)]
        if last_char == 's':
            expires = now + int(user_value)
        elif last_char == 'm':
            expires = now + (int(user_value) * 60)
        elif last_char == 'h':
            expires = now + (int(user_value) * 60 * 60)
        elif last_char == 'd':
            expires = now + (int(user_value) * 60 * 60 * 24)
        else:
            logger.error("Invalid expires: %s.  Missing s/m/h/d qualifier\n",
                values.expires)
            exit(-1)
    else:
        expires = time.strftime("%Y%m%d%H%M%S", values.expires)

    if expires < now:
        logger.error("Expires must be in the future")
        exit(-1)

    now_time = time.gmtime(now)
    expires_time = time.gmtime(expires)
    logger.debug("Currently %s, will expire at %s\n",
            time.strftime("%Y-%m-%d %H:%M:%S", now_time),
            time.strftime("%Y-%m-%d %H:%M:%S", expires_time))

    conn = boto.sdb.connect_to_region(values.region)

    suppress = SDBSuppressFilterBackend(conn)
    suppress.add_filter(values.filter,
            expires, values.comment, values.userid, values.ipaddr)
