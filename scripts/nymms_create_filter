#!/usr/bin/env python

__doc__ = """CLI tool to create new reactor suppression filters"""

import boto.sdb
from nymms.suppress.cli import SuppressCLI
from nymms.utils import cli
import argparse
import time
import os
import logging
import socket
import sys


def get_ipaddr():
    """This is probably the most consistent & cross platform way
    to figure out what our IP address is"""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('google.com', 80))
    ip = s.getsockname()[0]
    s.close()
    return ip

ipaddr = get_ipaddr()
userid = os.getlogin()

args = SuppressCLI()
args.add_argument('-e', '--expires', dest='expires', default='+1h',
        help='YYYYMMDDHHMMSS or +XXX[smhd] to expire in. default: %(default)s')
args.add_argument('-f', '--filter', dest='filter', required=True,
        help='Regex to filter events with')
args.add_argument('-C', '--comment', dest='comment', required=True,
        help='Comment to record with filter')
args.add_argument('-i', '--ipaddr', dest='ipaddr', default=ipaddr,
        help='Override IP address to record: %s' % (ipaddr,))
args.add_argument('-u', '--userid', dest='userid', default=userid,
        help='Override userid to record: %s' % (userid,))

values = args.parse_args()
logger = cli.setup_logging(values.verbose)

from nymms.suppress.sdb_suppress import SDBSuppressFilterBackend
args.load_config()

expires = args.parse_time(values.expires)

if expires < args.now():
    logger.error("Expires must be in the future")
    exit(-1)

now_time = time.gmtime(args.now())
expires_time = time.gmtime(expires)
logger.debug("Currently %s, will expire at %s\n",
        time.strftime("%Y-%m-%d %H:%M:%S", now_time),
        time.strftime("%Y-%m-%d %H:%M:%S", expires_time))

conn = boto.sdb.connect_to_region(args.region)

suppress = SDBSuppressFilterBackend(conn, args.domain)
suppress.add_suppression(values.filter,
        expires, values.comment, values.userid, values.ipaddr)
