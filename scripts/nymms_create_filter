#!/usr/bin/env python

__doc__ = """CLI tool to create new reactor suppression filters"""

import boto.sdb
from nymms.suppress.sdb_suppress import SDBSuppressFilterBackend
from nymms.suppress.cli import SuppressCLI
import argparse
import time
import os
import logging
import socket
import sys


def get_ipaddr():
    """This is probably the most consistent & cross platform way
    to figure out what our IP address is"""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('google.com', 80))
    ip = s.getsockname()[0]
    s.close()
    return ip

ipaddr = get_ipaddr()
userid = os.getlogin()

logger = logging.getLogger(__name__)
parser = argparse.ArgumentParser(__doc__)
cli = SuppressCLI(parser)
cli.add_argument('-e', '--expires', dest='expires', default='+1h',
        help='YYYYMMDDHHMMSS or +XXX[smhd] to expire in. default: +1h')
cli.add_argument('-f', '--filter', dest='filter', required=True,
        help='Regex to filter events with')
cli.add_argument('-c', '--comment', dest='comment', required=True,
        help='Comment to record with filter')
cli.add_argument('-i', '--ipaddr', dest='ipaddr', default=ipaddr,
        help='Override IP address to record: %s' % (ipaddr,))
cli.add_argument('-u', '--userid', dest='userid', default=userid,
        help='Override userid to record: %s' % (userid,))
values = cli.values()

expires = cli.parse_time(values.expires)

if expires < cli.now():
    logger.error("Expires must be in the future")
    exit(-1)

now_time = time.gmtime(cli.now())
expires_time = time.gmtime(expires)
logger.debug("Currently %s, will expire at %s\n",
        time.strftime("%Y-%m-%d %H:%M:%S", now_time),
        time.strftime("%Y-%m-%d %H:%M:%S", expires_time))

conn = boto.sdb.connect_to_region(cli.region)

suppress = SDBSuppressFilterBackend(conn, cli.domain)
suppress.add_filter(values.filter,
        expires, values.comment, values.userid, values.ipaddr)
